// Code generated by MockGen. DO NOT EDIT.
// Source: otp_repository.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"
	models "swasthAI/internal/auth/models"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockOTPRepository is a mock of OTPRepository interface.
type MockOTPRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOTPRepositoryMockRecorder
}

// MockOTPRepositoryMockRecorder is the mock recorder for MockOTPRepository.
type MockOTPRepositoryMockRecorder struct {
	mock *MockOTPRepository
}

// NewMockOTPRepository creates a new mock instance.
func NewMockOTPRepository(ctrl *gomock.Controller) *MockOTPRepository {
	mock := &MockOTPRepository{ctrl: ctrl}
	mock.recorder = &MockOTPRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOTPRepository) EXPECT() *MockOTPRepositoryMockRecorder {
	return m.recorder
}

// CountRecent mocks base method.
func (m *MockOTPRepository) CountRecent(ctx context.Context, phone string, duration time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRecent", ctx, phone, duration)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRecent indicates an expected call of CountRecent.
func (mr *MockOTPRepositoryMockRecorder) CountRecent(ctx, phone, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRecent", reflect.TypeOf((*MockOTPRepository)(nil).CountRecent), ctx, phone, duration)
}

// Create mocks base method.
func (m *MockOTPRepository) Create(ctx context.Context, otp *models.OTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOTPRepositoryMockRecorder) Create(ctx, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOTPRepository)(nil).Create), ctx, otp)
}

// Delete mocks base method.
func (m *MockOTPRepository) Delete(ctx context.Context, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOTPRepositoryMockRecorder) Delete(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOTPRepository)(nil).Delete), ctx, phone)
}

// FindByPhone mocks base method.
func (m *MockOTPRepository) FindByPhone(ctx context.Context, phone string) (models.OTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", ctx, phone)
	ret0, _ := ret[0].(models.OTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockOTPRepositoryMockRecorder) FindByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockOTPRepository)(nil).FindByPhone), ctx, phone)
}

// IncrementAttempts mocks base method.
func (m *MockOTPRepository) IncrementAttempts(ctx context.Context, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementAttempts", ctx, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementAttempts indicates an expected call of IncrementAttempts.
func (mr *MockOTPRepositoryMockRecorder) IncrementAttempts(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementAttempts", reflect.TypeOf((*MockOTPRepository)(nil).IncrementAttempts), ctx, phone)
}
